// Generated by `wit-bindgen` 0.36.0. DO NOT EDIT!
// Options used:
//   * runtime_path: "wit_bindgen_rt"
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod pkg {
    pub mod component {
        #[allow(dead_code, clippy::all)]
        pub mod data_type {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            #[derive(Clone)]
            pub struct Bid {
                pub auction: u64,
                pub bidder: u64,
                pub price: u64,
                pub channel: _rt::String,
                pub url: _rt::String,
                pub date_time: u64,
                pub extra: _rt::String,
            }
            impl ::core::fmt::Debug for Bid {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Bid")
                        .field("auction", &self.auction)
                        .field("bidder", &self.bidder)
                        .field("price", &self.price)
                        .field("channel", &self.channel)
                        .field("url", &self.url)
                        .field("date-time", &self.date_time)
                        .field("extra", &self.extra)
                        .finish()
                }
            }
        }
    }
}
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod exports {
    pub mod pkg {
        pub mod component {
            #[allow(dead_code, clippy::all)]
            pub mod nexmark {
                #[used]
                #[doc(hidden)]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                pub type Bid = super::super::super::super::pkg::component::data_type::Bid;
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_qs_cabi<T: Guest>(
                    arg0: i64,
                    arg1: i64,
                    arg2: i64,
                    arg3: *mut u8,
                    arg4: usize,
                    arg5: *mut u8,
                    arg6: usize,
                    arg7: i64,
                    arg8: *mut u8,
                    arg9: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg4;
                    let bytes0 = _rt::Vec::from_raw_parts(arg3.cast(), len0, len0);
                    let len1 = arg6;
                    let bytes1 = _rt::Vec::from_raw_parts(arg5.cast(), len1, len1);
                    let len2 = arg9;
                    let bytes2 = _rt::Vec::from_raw_parts(arg8.cast(), len2, len2);
                    let result3 = T::qs(super::super::super::super::pkg::component::data_type::Bid {
                        auction: arg0 as u64,
                        bidder: arg1 as u64,
                        price: arg2 as u64,
                        channel: _rt::string_lift(bytes0),
                        url: _rt::string_lift(bytes1),
                        date_time: arg7 as u64,
                        extra: _rt::string_lift(bytes2),
                    });
                    let ptr4 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result3 {
                        Some(e) => {
                            *ptr4.add(0).cast::<u8>() = (1i32) as u8;
                            let super::super::super::super::pkg::component::data_type::Bid {
                                auction: auction5,
                                bidder: bidder5,
                                price: price5,
                                channel: channel5,
                                url: url5,
                                date_time: date_time5,
                                extra: extra5,
                            } = e;
                            *ptr4.add(8).cast::<i64>() = _rt::as_i64(auction5);
                            *ptr4.add(16).cast::<i64>() = _rt::as_i64(bidder5);
                            *ptr4.add(24).cast::<i64>() = _rt::as_i64(price5);
                            let vec6 = (channel5.into_bytes()).into_boxed_slice();
                            let ptr6 = vec6.as_ptr().cast::<u8>();
                            let len6 = vec6.len();
                            ::core::mem::forget(vec6);
                            *ptr4.add(36).cast::<usize>() = len6;
                            *ptr4.add(32).cast::<*mut u8>() = ptr6.cast_mut();
                            let vec7 = (url5.into_bytes()).into_boxed_slice();
                            let ptr7 = vec7.as_ptr().cast::<u8>();
                            let len7 = vec7.len();
                            ::core::mem::forget(vec7);
                            *ptr4.add(44).cast::<usize>() = len7;
                            *ptr4.add(40).cast::<*mut u8>() = ptr7.cast_mut();
                            *ptr4.add(48).cast::<i64>() = _rt::as_i64(date_time5);
                            let vec8 = (extra5.into_bytes()).into_boxed_slice();
                            let ptr8 = vec8.as_ptr().cast::<u8>();
                            let len8 = vec8.len();
                            ::core::mem::forget(vec8);
                            *ptr4.add(60).cast::<usize>() = len8;
                            *ptr4.add(56).cast::<*mut u8>() = ptr8.cast_mut();
                        }
                        None => {
                            *ptr4.add(0).cast::<u8>() = (0i32) as u8;
                        }
                    };
                    ptr4
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_qs<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {}
                        _ => {
                            let l1 = *arg0.add(32).cast::<*mut u8>();
                            let l2 = *arg0.add(36).cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                            let l3 = *arg0.add(40).cast::<*mut u8>();
                            let l4 = *arg0.add(44).cast::<usize>();
                            _rt::cabi_dealloc(l3, l4, 1);
                            let l5 = *arg0.add(56).cast::<*mut u8>();
                            let l6 = *arg0.add(60).cast::<usize>();
                            _rt::cabi_dealloc(l5, l6, 1);
                        }
                    }
                }
                pub trait Guest {
                    fn qs(bid: Bid) -> Option<Bid>;
                }
                #[doc(hidden)]
                macro_rules! __export_pkg_component_nexmark_cabi {
                    ($ty:ident with_types_in $($path_to_types:tt)*) => {
                        const _ : () = { #[export_name = "pkg:component/nexmark#qs"]
                        unsafe extern "C" fn export_qs(arg0 : i64, arg1 : i64, arg2 :
                        i64, arg3 : * mut u8, arg4 : usize, arg5 : * mut u8, arg6 :
                        usize, arg7 : i64, arg8 : * mut u8, arg9 : usize,) -> * mut u8 {
                        $($path_to_types)*:: _export_qs_cabi::<$ty > (arg0, arg1, arg2,
                        arg3, arg4, arg5, arg6, arg7, arg8, arg9) } #[export_name =
                        "cabi_post_pkg:component/nexmark#qs"] unsafe extern "C" fn
                        _post_return_qs(arg0 : * mut u8,) { $($path_to_types)*::
                        __post_return_qs::<$ty > (arg0) } };
                    };
                }
                #[doc(hidden)]
                pub(crate) use __export_pkg_component_nexmark_cabi;
                #[repr(align(8))]
                struct _RetArea([::core::mem::MaybeUninit<u8>; 64]);
                static mut _RET_AREA: _RetArea = _RetArea(
                    [::core::mem::MaybeUninit::uninit(); 64],
                );
            }
        }
    }
}
#[rustfmt::skip]
mod _rt {
    pub use alloc_crate::string::String;
    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
    pub use alloc_crate::vec::Vec;
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    pub fn as_i64<T: AsI64>(t: T) -> i64 {
        t.as_i64()
    }
    pub trait AsI64 {
        fn as_i64(self) -> i64;
    }
    impl<'a, T: Copy + AsI64> AsI64 for &'a T {
        fn as_i64(self) -> i64 {
            (*self).as_i64()
        }
    }
    impl AsI64 for i64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }
    impl AsI64 for u64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr, layout);
    }
    extern crate alloc as alloc_crate;
    pub use alloc_crate::alloc;
}
/// Generates `#[no_mangle]` functions to export the specified type as the
/// root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]
macro_rules! __export_component_impl {
    ($ty:ident) => {
        self::export!($ty with_types_in self);
    };
    ($ty:ident with_types_in $($path_to_types_root:tt)*) => {
        $($path_to_types_root)*::
        exports::pkg::component::nexmark::__export_pkg_component_nexmark_cabi!($ty
        with_types_in $($path_to_types_root)*:: exports::pkg::component::nexmark);
    };
}
#[doc(inline)]
pub(crate) use __export_component_impl as export;
#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:wit-bindgen:0.36.0:pkg:component:component:encoded world"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 557] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xad\x03\x01A\x02\x01\
A\x06\x01B\x06\x01r\x0a\x02idw\x09item-names\x0bdescriptions\x0binitial-bidw\x07\
reservew\x09date-timew\x07expiresw\x06sellerw\x08categoryw\x05extras\x04\0\x07au\
ction\x03\0\0\x01r\x07\x07auctionw\x06bidderw\x05pricew\x07channels\x03urls\x09d\
ate-timew\x05extras\x04\0\x03bid\x03\0\x02\x01r\x08\x02idw\x04names\x0demail-add\
resss\x0bcredit-cards\x04citys\x05states\x09date-timew\x05extras\x04\0\x06person\
\x03\0\x04\x03\0\x17pkg:component/data-type\x05\0\x02\x03\0\0\x03bid\x02\x03\0\0\
\x07auction\x01B\x07\x02\x03\x02\x01\x01\x04\0\x03bid\x03\0\0\x02\x03\x02\x01\x02\
\x04\0\x07auction\x03\0\x02\x01k\x01\x01@\x01\x03bid\x01\0\x04\x04\0\x02qs\x01\x05\
\x04\0\x15pkg:component/nexmark\x05\x03\x04\0\x17pkg:component/component\x04\0\x0b\
\x0f\x01\0\x09component\x03\0\0\0G\x09producers\x01\x0cprocessed-by\x02\x0dwit-c\
omponent\x070.220.1\x10wit-bindgen-rust\x060.36.0";
#[inline(never)]
#[doc(hidden)]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
