// Generated by `wit-bindgen` 0.36.0. DO NOT EDIT!
// Options used:
//   * runtime_path: "wit_bindgen_rt"
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod exports {
    pub mod pkg {
        pub mod component {
            #[allow(dead_code, clippy::all)]
            pub mod nexmark {
                #[used]
                #[doc(hidden)]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_q1_cabi<T: Guest>(
                    arg0: i64,
                    arg1: i64,
                    arg2: i64,
                    arg3: i64,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = T::q1(
                        arg0 as u64,
                        arg1 as u64,
                        arg2 as u64,
                        arg3 as u64,
                    );
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    let (t2_0, t2_1, t2_2, t2_3) = result0;
                    *ptr1.add(0).cast::<i64>() = _rt::as_i64(t2_0);
                    *ptr1.add(8).cast::<i64>() = _rt::as_i64(t2_1);
                    *ptr1.add(16).cast::<i64>() = _rt::as_i64(t2_2);
                    *ptr1.add(24).cast::<i64>() = _rt::as_i64(t2_3);
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_q2_cabi<T: Guest>(
                    arg0: i64,
                    arg1: i64,
                    arg2: *mut u8,
                    arg3: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg3;
                    let result1 = T::q2(
                        arg0 as u64,
                        arg1 as u64,
                        _rt::Vec::from_raw_parts(arg2.cast(), len0, len0),
                    );
                    let ptr2 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result1 {
                        Some(e) => {
                            *ptr2.add(0).cast::<u8>() = (1i32) as u8;
                            let (t3_0, t3_1) = e;
                            *ptr2.add(8).cast::<i64>() = _rt::as_i64(t3_0);
                            *ptr2.add(16).cast::<i64>() = _rt::as_i64(t3_1);
                        }
                        None => {
                            *ptr2.add(0).cast::<u8>() = (0i32) as u8;
                        }
                    };
                    ptr2
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_single_filter_cabi<T: Guest>(
                    arg0: i64,
                    arg1: *mut u8,
                    arg2: usize,
                ) -> i32 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg2;
                    let result1 = T::single_filter(
                        arg0 as u64,
                        _rt::Vec::from_raw_parts(arg1.cast(), len0, len0),
                    );
                    match result1 {
                        true => 1,
                        false => 0,
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_multi_filter_cabi<T: Guest>(
                    arg0: *mut u8,
                    arg1: usize,
                ) -> i32 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let base4 = arg0;
                    let len4 = arg1;
                    let mut result4 = _rt::Vec::with_capacity(len4);
                    for i in 0..len4 {
                        let base = base4.add(i * 16);
                        let e4 = {
                            let l0 = *base.add(0).cast::<i64>();
                            let l1 = *base.add(8).cast::<*mut u8>();
                            let l2 = *base.add(12).cast::<usize>();
                            let len3 = l2;
                            (l0 as u64, _rt::Vec::from_raw_parts(l1.cast(), len3, len3))
                        };
                        result4.push(e4);
                    }
                    _rt::cabi_dealloc(base4, len4 * 16, 8);
                    let result5 = T::multi_filter(result4);
                    match result5 {
                        true => 1,
                        false => 0,
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_multi_filter_opt_cabi<T: Guest>(
                    arg0: *mut u8,
                    arg1: usize,
                ) -> i32 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let base4 = arg0;
                    let len4 = arg1;
                    let mut result4 = _rt::Vec::with_capacity(len4);
                    for i in 0..len4 {
                        let base = base4.add(i * 16);
                        let e4 = {
                            let l0 = *base.add(0).cast::<i64>();
                            let l1 = *base.add(8).cast::<*mut u8>();
                            let l2 = *base.add(12).cast::<usize>();
                            let len3 = l2;
                            (l0 as u64, _rt::Vec::from_raw_parts(l1.cast(), len3, len3))
                        };
                        result4.push(e4);
                    }
                    _rt::cabi_dealloc(base4, len4 * 16, 8);
                    let result5 = T::multi_filter_opt(result4);
                    match result5 {
                        true => 1,
                        false => 0,
                    }
                }
                pub trait Guest {
                    /// convert-currency
                    fn q1(
                        auction: u64,
                        price: u64,
                        bidder: u64,
                        date_time: u64,
                    ) -> (u64, u64, u64, u64);
                    /// filter
                    fn q2(
                        auction: u64,
                        price: u64,
                        filters: _rt::Vec<u64>,
                    ) -> Option<(u64, u64)>;
                    /// single-filter
                    fn single_filter(p: u64, filter: _rt::Vec<u64>) -> bool;
                    /// multi-filter
                    fn multi_filter(v: _rt::Vec<(u64, _rt::Vec<u64>)>) -> bool;
                    /// multi-filter-opt
                    fn multi_filter_opt(v: _rt::Vec<(u64, _rt::Vec<u64>)>) -> bool;
                }
                #[doc(hidden)]
                macro_rules! __export_pkg_component_nexmark_cabi {
                    ($ty:ident with_types_in $($path_to_types:tt)*) => {
                        const _ : () = { #[export_name = "pkg:component/nexmark#q1"]
                        unsafe extern "C" fn export_q1(arg0 : i64, arg1 : i64, arg2 :
                        i64, arg3 : i64,) -> * mut u8 { $($path_to_types)*::
                        _export_q1_cabi::<$ty > (arg0, arg1, arg2, arg3) } #[export_name
                        = "pkg:component/nexmark#q2"] unsafe extern "C" fn export_q2(arg0
                        : i64, arg1 : i64, arg2 : * mut u8, arg3 : usize,) -> * mut u8 {
                        $($path_to_types)*:: _export_q2_cabi::<$ty > (arg0, arg1, arg2,
                        arg3) } #[export_name = "pkg:component/nexmark#single-filter"]
                        unsafe extern "C" fn export_single_filter(arg0 : i64, arg1 : *
                        mut u8, arg2 : usize,) -> i32 { $($path_to_types)*::
                        _export_single_filter_cabi::<$ty > (arg0, arg1, arg2) }
                        #[export_name = "pkg:component/nexmark#multi-filter"] unsafe
                        extern "C" fn export_multi_filter(arg0 : * mut u8, arg1 : usize,)
                        -> i32 { $($path_to_types)*:: _export_multi_filter_cabi::<$ty >
                        (arg0, arg1) } #[export_name =
                        "pkg:component/nexmark#multi-filter-opt"] unsafe extern "C" fn
                        export_multi_filter_opt(arg0 : * mut u8, arg1 : usize,) -> i32 {
                        $($path_to_types)*:: _export_multi_filter_opt_cabi::<$ty > (arg0,
                        arg1) } };
                    };
                }
                #[doc(hidden)]
                pub(crate) use __export_pkg_component_nexmark_cabi;
                #[repr(align(8))]
                struct _RetArea([::core::mem::MaybeUninit<u8>; 32]);
                static mut _RET_AREA: _RetArea = _RetArea(
                    [::core::mem::MaybeUninit::uninit(); 32],
                );
            }
        }
    }
}
#[rustfmt::skip]
mod _rt {
    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
    pub fn as_i64<T: AsI64>(t: T) -> i64 {
        t.as_i64()
    }
    pub trait AsI64 {
        fn as_i64(self) -> i64;
    }
    impl<'a, T: Copy + AsI64> AsI64 for &'a T {
        fn as_i64(self) -> i64 {
            (*self).as_i64()
        }
    }
    impl AsI64 for i64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }
    impl AsI64 for u64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }
    pub use alloc_crate::vec::Vec;
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr, layout);
    }
    extern crate alloc as alloc_crate;
    pub use alloc_crate::alloc;
}
/// Generates `#[no_mangle]` functions to export the specified type as the
/// root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]
macro_rules! __export_component_impl {
    ($ty:ident) => {
        self::export!($ty with_types_in self);
    };
    ($ty:ident with_types_in $($path_to_types_root:tt)*) => {
        $($path_to_types_root)*::
        exports::pkg::component::nexmark::__export_pkg_component_nexmark_cabi!($ty
        with_types_in $($path_to_types_root)*:: exports::pkg::component::nexmark);
    };
}
#[doc(inline)]
pub(crate) use __export_component_impl as export;
#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:wit-bindgen:0.36.0:pkg:component:component:encoded world"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 381] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xfd\x01\x01A\x02\x01\
A\x02\x01B\x0f\x01o\x04wwww\x01@\x04\x07auctionw\x05pricew\x06bidderw\x09date-ti\
mew\0\0\x04\0\x02q1\x01\x01\x01pw\x01o\x02ww\x01k\x03\x01@\x03\x07auctionw\x05pr\
icew\x07filters\x02\0\x04\x04\0\x02q2\x01\x05\x01@\x02\x01pw\x06filter\x02\0\x7f\
\x04\0\x0dsingle-filter\x01\x06\x01o\x02w\x02\x01p\x07\x01@\x01\x01v\x08\0\x7f\x04\
\0\x0cmulti-filter\x01\x09\x04\0\x10multi-filter-opt\x01\x09\x04\0\x15pkg:compon\
ent/nexmark\x05\0\x04\0\x17pkg:component/component\x04\0\x0b\x0f\x01\0\x09compon\
ent\x03\0\0\0G\x09producers\x01\x0cprocessed-by\x02\x0dwit-component\x070.220.1\x10\
wit-bindgen-rust\x060.36.0";
#[inline(never)]
#[doc(hidden)]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
